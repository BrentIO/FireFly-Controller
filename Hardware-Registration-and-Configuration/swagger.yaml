openapi: 3.0.3
info:
  title: FireFly Hardware Registration and Configuration
  description: Retrieve and set data required for hardware registration
  version: 2023.6.0
servers:
  - url: 'http://{domain}'
    variables:
      domain:
        default: 192.168.4.1
        description: IP address of the device's WiFi interface

tags:
  - name: EEPROM
    description: Operations for managing the external EEPROM data
  - name: Network
    description: Operations for network communications
  - name: Partitions
    description: Operations for the internal EEPROM partition information
  - name: Peripherals
    description: Operations for the on-board peripherals
  - name: MCU
    description: Operations for the main control unit
  - name: Version
    description: Operations for the hardware and firmware versions


paths:
  /api/network:
    get:
      tags:
       - Network
      summary: Retrieve all network interfaces
      description: Retrieve all of the network interfaces
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listmacAddressAndType'

  /api/network/{interface}:
    get:
      tags:
       - Network
      summary: Retrieve the specified network interface
      description: Retrieve the specified network interface information
      parameters:
        - in: path
          name: interface
          schema:
            $ref: '#/components/schemas/networkInterfaceTypes'
          required: true
          description: Network interface to retrieve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/macAddressAndType'
        404:
          description: Not Found

  /api/eeprom:
    post:
      tags:
       - EEPROM
      summary: Store the configuration
      description: Store the EEPROM configuration with the payload specified.  The response is synchronous to the operation completing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eepromConfig'
      responses:
        201:
          description: Wrote EEPROM successfully
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_message'
              example:
                message: EEPROM already configured
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: Cannot connect to external EEPROM

    get:
      tags:
       - EEPROM
      summary: Retrieve the configuration
      description: Retrieve the current EEPROM configuration
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eepromConfig'
        404:
          description: No EEPROM configuration exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: Cannot connect to external EEPROM

    delete:
      tags:
        - EEPROM
      summary: Format the EEPROM
      description: Format the EEPROM so it has no data.  The response is synchronous to the operation completing
      responses:
        204:
          description: Deleted EEPROM successfully
        404:
          description: No EEPROM coniguration exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: Cannot connect to external EEPROM

  /api/mcu:
    get:
      tags:
       - MCU
      summary: Main control unit hardware information
      description: Retrieve the main control unit hardware information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mcuInfo'

  /api/partitions:
    get:
      tags:
       - Partitions
      summary: Internal EEPROM partition schema
      description: Retrieve internal EEPROM partition schema information from the MCU
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPartitions'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: esp_partition_find returned NULL

  /api/peripherals:
    get:
      tags:
       - Peripherals
      summary: On-board peripheral information
      description: Retrieve all peripherals that were defined for the hardware type in firmware
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPeripherals'

  /api/version:
    get:
      tags:
        - Version
      summary: Hardware and firmware version information
      description: Retrieves the hardware and firmware version information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionInfo'

      
components:

  schemas:
    error_message:
      type: object
      properties:
        error:
          type: string
          description: Message describing the error condition
          example: Unexpected Error

    bad_request_message:
      type: object
      properties:
        message:
          type: string
          description: Message describing the issue with the request body
          example: Missing parameter in request

    networkInterfaceTypes:
      type: string
      enum:
        - bluetooth
        - ethernet
        - wifi
        - wifi_ap

    macAddress:
      type: string
      description: Hardware address
      pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
      example: DE:AD:BE:EF:FE:ED

    listmacAddressAndType:
      type: array
      items:
        $ref: '#/components/schemas/macAddressAndType'

    macAddressAndType:
      type: object
      properties:
        mac_address:
          $ref: '#/components/schemas/macAddress'
        interface:
          $ref: '#/components/schemas/networkInterfaceTypes'

    partitionType:
      type: integer
      description: Partition Type, as defined in https://docs.espressif.com/projects/esp-idf/en/v4.2/esp32/api-reference/storage/spi_flash.html#_CPPv420esp_partition_type_t
      example: 1

    partitionSubType:
      type: integer
      description: Partition SubType, as defined in https://docs.espressif.com/projects/esp-idf/en/v4.2/esp32/api-reference/storage/spi_flash.html#_CPPv423esp_partition_subtype_t
      example: 2

    partitionAddress:
      type: integer
      description: Start address for the partition, in bytes
      example: 36864

    partitionSize:
      type: integer
      description: Size of the partition, in bytes
      example: 20480

    partitionLabel:
      type: string
      maxLength: 16
      description: Arbitrary label for the partition
      example: "nvs"

    partition:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/partitionType'
        subtype:
          $ref: '#/components/schemas/partitionSubType'
        address:
          $ref: '#/components/schemas/partitionAddress'
        size:
          $ref: '#/components/schemas/partitionSize'
        label:
          $ref: '#/components/schemas/partitionLabel'

    listPartitions:
      type: array
      items:
        $ref: '#/components/schemas/partition'

    peripheralAddress:
      type: string
      maxLength: 5
      pattern: "^[A-Fa-f0-9]+$"
      description: Hexadecimal address of the peripheral
      example: "0x20"

    peripheralType:
      type: string
      description: Type of peripheral
      enum:
        - INPUT
        - OUTPUT
        - TEMPERATURE
        - OLED
        - EEPROM

    peripheralOnline:
      type: boolean
      description: If the peripheral was found to be online

    peripheral:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/peripheralAddress'
        type:
          $ref: '#/components/schemas/peripheralType'
        online:
          $ref: '#/components/schemas/peripheralOnline'

    listPeripherals:
      type: array
      items:
        $ref: '#/components/schemas/peripheral'
   
    eepromConfig:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier for the device
          format: uuid
          minLength: 36
          maxLength: 36
        product_id:
          type: string
          description: Device product ID, which includes the board revision code
          example: "FFC3232-2211"
          maxLength: 32
        key:
          type: string
          description: String of random characters used for authentication
          minLength: 64
          maxLength: 64
          example: bCsCaNv1LIf0UriPsKWTOTbz2biycaNOL57fcuBjqkxrnSONcqjHt1416iJfg8QJ
          pattern: '^[0-9A-Za-z]{64}$'
      required:
        - uuid
        - product_id
        - key

    mcuInfo:
      type: object
      properties:
        chip_model:
          type: string
          description: Main chip model
          example: ESP32-D0WDQ5
        revision:
          type: string
          description: Chip revision
          example: 3
        flash_chip_size:
          type: integer
          description: Size of the flash chip in bytes
          example: 16777216

    applicationVersion:
      type: string
      description: Version of the firmware
      example: "2023.01.0001"

    productHex:
      type: string
      description: Hardware product hexadecimal, indicating the version of the firmware
      example: "0x8062305"

    versionInfo:
      type: object
      properties:
        application:
          $ref: '#/components/schemas/applicationVersion'
        product_hex:
          $ref: '#/components/schemas/productHex'
