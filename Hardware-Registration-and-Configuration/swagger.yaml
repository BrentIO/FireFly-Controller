openapi: 3.0.3
info:
  title: FireFly Hardware Registration and Configuration
  description: Retrieve and set data required for hardware registration
  version: 2023.6.0


servers:
  - url: 'http://{domain}'
    variables:
      domain:
        default: 192.168.4.1
        description: IP address of the device's WiFi interface


tags:
  - name: Authorization
    description: Mangage long-term http authorizations
  - name: Certificates
    description: Operations for the storage, retrieval, and management of certificates
  - name: Configuration
    description: Operations for configuring various services
  - name: EEPROM
    description: Operations for managing the external EEPROM data
  - name: Event and Error Logs
    description: Operations for the event and error logs
  - name: Network
    description: Operations for network communications
  - name: Partitions
    description: Operations for the internal EEPROM partition information
  - name: Peripherals
    description: Operations for the on-board peripherals
  - name: MCU
    description: Operations for the main control unit
  - name: Version
    description: Operations for the hardware and firmware versions


paths:

  /api/network:
    get:
      tags:
       - Network
      summary: Retrieve all network interfaces
      description: Retrieve all of the network interfaces
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listmacAddressAndType'

  /api/network/{interface}:
    get:
      tags:
       - Network
      summary: Retrieve the specified network interface
      description: Retrieve the specified network interface information
      parameters:
        - in: path
          name: interface
          schema:
            $ref: '#/components/schemas/networkInterfaceTypes'
          required: true
          description: Network interface to retrieve
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/macAddressAndType'
        404:
          description: Not Found

  /api/eeprom:
    post:
      tags:
       - EEPROM
      summary: Store the configuration
      description: Store the EEPROM configuration with the payload specified.  The response is synchronous to the operation completing
      security:
        - visualToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/eepromConfig'
      responses:
        201:
          description: Wrote EEPROM successfully
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_message'
              example:
                message: EEPROM already configured
        401:
          description: Unauthorized
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: Cannot connect to external EEPROM

    get:
      tags:
       - EEPROM
      summary: Retrieve the configuration
      description: Retrieve the current EEPROM configuration
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eepromConfig'
        404:
          description: No EEPROM configuration exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: Cannot connect to external EEPROM

    delete:
      tags:
        - EEPROM
      summary: Format the EEPROM
      description: Format the EEPROM so it has no data.  The response is synchronous to the operation completing
      security:
        - visualToken: []
      responses:
        204:
          description: Deleted EEPROM successfully
        401:
          description: Unauthorized
        404:
          description: No EEPROM coniguration exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: Cannot connect to external EEPROM

  /api/mcu:
    get:
      tags:
       - MCU
      summary: Main control unit hardware information
      description: Retrieve the main control unit hardware information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mcuInfo'

  /api/partitions:
    get:
      tags:
       - Partitions
      summary: Internal EEPROM partition schema
      description: Retrieve internal EEPROM partition schema information from the MCU
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPartitions'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: esp_partition_find returned NULL

  /api/peripherals:
    get:
      tags:
       - Peripherals
      summary: On-board peripheral information
      description: Retrieve all peripherals that were defined for the hardware type in firmware
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listPeripherals'

  /api/version:
    get:
      tags:
        - Version
      summary: Hardware and firmware version information
      description: Retrieves the hardware and firmware version information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/applicationVersionInfo'


  /ui/version:
    get:
      tags:
        - Version
      summary: User interface version information
      description: Retrieves the user interface version information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uiVersionInfo'
        404:
          description: File system failure

  /api/errors:
    get:
      tags:
       - Event and Error Logs
      summary: Error log information
      description: Retrieve all of the active errors
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorLog'
              examples:
                Events in the log:
                  $ref: '#/components/examples/errorLog'
                No log entries:
                  $ref: '#/components/examples/emptyArray'

  /api/events:
    get:
      tags:
       - Event and Error Logs
      summary: Event log information
      description: Retrieve all of the events still remaining in the event log
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventLog'
              examples:
                Events in the log:
                  $ref: '#/components/examples/eventLog'
                No log entries:
                  $ref: '#/components/examples/emptyArray'


  /api/ota:

    post:
      tags:
        - Configuration
      summary: OTA firmware configuration
      description: Stores the over-the-air (OTA) firmware configuration
      security:
        - visualToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/otaConfiguration'
      responses:
        201:
          description: Created
        401:
          description: Unauthorized
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_message'
              example:
                message: Request requires body
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_message'
              example:
                message: Configuration already exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted

    get:
      tags:
        - Configuration
      summary: OTA firmware configuration
      description: Retrieve the over-the-air (OTA) firmware configuration
      security:
        - visualToken: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/otaConfiguration'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted

    delete:
      tags:
        - Configuration
      summary: OTA firmware configuration
      description: Delete the over-the-air (OTA) firmware configuration
      security:
        - visualToken: []
      responses:
        204:
          description: Deleted configuration successfully
        401:
          description: Unauthorized
        404:
          description: No configuration exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted


  /certs:
    get:
      tags:
        - Certificates
      summary: Get certificate list
      description: Retrives the list of certificates in flash storage
      security:
        - visualToken: []
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/certificateList'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted


    post:
      tags:
        - Certificates
      summary: Create a new certificate
      description: Creates a new certificate with the content in the payload
      security:
        - visualToken: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Created
        401:
          description: Unauthorized
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bad_request_message'
              example:
                message: Certificate already exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted


  /certs/{filename}:
    get:
      tags:
        - Certificates
      summary: Get a certificate
      description: Retrieves the content of a certificate
      security:
        - visualToken: []
      parameters:
        - in: path
          name: filename
          schema:
            type: string
            example: github.cer
          required: true
          description: Certificate filename to retrieve
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/certificateContent'
        401:
          description: Unauthorized
        404:
          description: Not Found
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted

    delete:
      tags:
        - Certificates
      summary: Delete a certificate
      description: Deletes the requested certificate from flash storage
      security:
        - visualToken: []
      parameters:
        - in: path
          name: file
          schema:
            type: string
            example: github.cer
          required: true
          description: Certificate filename to delete
      responses:
        204:
          description: Deleted certificate successfully
        401:
          description: Unauthorized
        404:
          description: Not Found
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error_message'
              example:
                message: File system not mounted

  /auth:
    post:
      tags:
        - Authorization
      summary: Authorize the visual token
      description: Creates a long-term authorization for a visual token (typically 60 minutes)
      security:
        - visualToken: []
      responses:
        204:
          description: Authorized
        401:
          description: Unauthorized


      
components:

  securitySchemes:
    visualToken:
      type: apiKey
      in: header
      name: x-visual-token
      description: A security token visually displayed on the device which changes on a regular basis

  schemas:
    error_message:
      type: object
      properties:
        error:
          type: string
          description: Message describing the error condition
          example: Unexpected Error

    bad_request_message:
      type: object
      properties:
        message:
          type: string
          description: Message describing the issue with the request body
          example: Missing parameter in request

    networkInterfaceTypes:
      type: string
      enum:
        - bluetooth
        - ethernet
        - wifi
        - wifi_ap

    macAddress:
      type: string
      description: Hardware address
      pattern: ^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$
      example: DE:AD:BE:EF:FE:ED

    listmacAddressAndType:
      type: array
      items:
        $ref: '#/components/schemas/macAddressAndType'

    macAddressAndType:
      type: object
      properties:
        mac_address:
          $ref: '#/components/schemas/macAddress'
        interface:
          $ref: '#/components/schemas/networkInterfaceTypes'

    partitionType:
      type: integer
      description: Partition Type, as defined in https://docs.espressif.com/projects/esp-idf/en/v4.2/esp32/api-reference/storage/spi_flash.html#_CPPv420esp_partition_type_t
      example: 1

    partitionSubType:
      type: integer
      description: Partition SubType, as defined in https://docs.espressif.com/projects/esp-idf/en/v4.2/esp32/api-reference/storage/spi_flash.html#_CPPv423esp_partition_subtype_t
      example: 2

    partitionAddress:
      type: integer
      description: Start address for the partition, in bytes
      example: 36864

    partitionSize:
      type: integer
      description: Size of the partition, in bytes
      example: 20480

    partitionLabel:
      type: string
      maxLength: 16
      description: Arbitrary label for the partition
      example: "nvs"

    partition:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/partitionType'
        subtype:
          $ref: '#/components/schemas/partitionSubType'
        address:
          $ref: '#/components/schemas/partitionAddress'
        size:
          $ref: '#/components/schemas/partitionSize'
        label:
          $ref: '#/components/schemas/partitionLabel'

    listPartitions:
      type: array
      items:
        $ref: '#/components/schemas/partition'

    peripheralAddress:
      type: string
      maxLength: 5
      pattern: "^[A-Fa-f0-9]+$"
      description: Hexadecimal address of the peripheral
      example: "0x20"

    peripheralType:
      type: string
      description: Type of peripheral
      enum:
        - INPUT
        - OUTPUT
        - TEMPERATURE
        - OLED
        - EEPROM

    peripheralOnline:
      type: boolean
      description: If the peripheral was found to be online

    peripheral:
      type: object
      properties:
        address:
          $ref: '#/components/schemas/peripheralAddress'
        type:
          $ref: '#/components/schemas/peripheralType'
        online:
          $ref: '#/components/schemas/peripheralOnline'

    listPeripherals:
      type: array
      items:
        $ref: '#/components/schemas/peripheral'
   
    eepromConfig:
      type: object
      properties:
        uuid:
          type: string
          description: Unique identifier for the device
          format: uuid
          minLength: 36
          maxLength: 36
        product_id:
          type: string
          description: Device product ID, which includes the board revision code
          example: "FFC3232-2211"
          maxLength: 32
        key:
          type: string
          description: String of random characters used for authentication
          minLength: 64
          maxLength: 64
          example: bCsCaNv1LIf0UriPsKWTOTbz2biycaNOL57fcuBjqkxrnSONcqjHt1416iJfg8QJ
          pattern: '^[0-9A-Za-z]{64}$'
      required:
        - uuid
        - product_id
        - key

    mcuInfo:
      type: object
      properties:
        chip_model:
          type: string
          description: Main chip model
          example: ESP32-D0WDQ5
        revision:
          type: string
          description: Chip revision
          example: 3
        flash_chip_size:
          type: integer
          description: Size of the flash chip in bytes
          example: 16777216
        boot_time:
          type: integer
          description: Epoch time the device booted in seconds.  If unknown, number of seconds elapsed since boot will be returned
          example: 1709398094

    eventLog:
      type: array
      items:
        $ref: '#/components/schemas/eventLogEntry'

    eventLogEntry:
      type: object
      properties:
        time:
          type: integer
          description: Time the event occurred, in seconds.  If NTP time was available when the event was logged, Epoch time will be used.  Otherwise, time since boot will be used
          example: 1709398094
        level:
          type: string
          description: Severity level for the event
          enum:
            - info
            - notify
            - error
            - unknown
          example: info
        text:
          type: string
          description: Descriptive text about the event
          example: Event log started

    errorLog:
      type: array
      items:
        $ref: '#/components/schemas/errorLogEntry'

    errorLogEntry:
      type: object
      properties:
        text:
          type: string
          description: Descriptive text about the event
          example: EEPROM Failure

    applicationVersion:
      type: string
      description: Software version
      example: "2024.2.1"

    productHex:
      type: string
      description: Hardware product hexadecimal, indicating the version of the firmware
      example: "0x8062305"

    applicationVersionInfo:
      type: object
      properties:
        application:
          $ref: '#/components/schemas/applicationVersion'
        product_hex:
          $ref: '#/components/schemas/productHex'

    uiVersionInfo:
      type: object
      properties:
        ui:
          $ref: '#/components/schemas/applicationVersion'


    certificateListItem:
      type: object
      properties:
        file:
          type: string
          description: Certificate's filename
          example: github.cer
        size:
          type: integer
          description: Certificate's size in bytes
          example: 1410


    certificateList:
      type: array
      items:
        $ref: '#/components/schemas/certificateListItem'


    certificateContent:
      type: string
      example: 
        -----BEGIN CERTIFICATE-----
        MIID0zCCArugAwIBAgIQVmcdBOpPmUxvEIFHWdJ1lDANBgkqhkiG9w0BAQwFADB7
        MQswCQYDVQQGEwJHQjEbMBkGA1UECAwSR3JlYXRlciBNYW5jaGVzdGVyMRAwDgYD
        VQQHDAdTYWxmb3JkMRowGAYDVQQKDBFDb21vZG8gQ0EgTGltaXRlZDEhMB8GA1UE
        AwwYQUFBIENlcnRpZmljYXRlIFNlcnZpY2VzMB4XDTE5MDMxMjAwMDAwMFoXDTI4
        MTIzMTIzNTk1OVowgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpOZXcgSmVyc2V5
        MRQwEgYDVQQHEwtKZXJzZXkgQ2l0eTEeMBwGA1UEChMVVGhlIFVTRVJUUlVTVCBO
        ZXR3b3JrMS4wLAYDVQQDEyVVU0VSVHJ1c3QgRUNDIENlcnRpZmljYXRpb24gQXV0
        aG9yaXR5MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEGqxUWqn5aCPnetUkb1PGWthL
        q8bVttHmc3Gu3ZzWDGH926CJA7gFFOxXzu5dP+Ihs8731Ip54KODfi2X0GHE8Znc
        JZFjq38wo7Rw4sehM5zzvy5cU7Ffs30yf4o043l5o4HyMIHvMB8GA1UdIwQYMBaA
        FKARCiM+lvEH7OKvKe+CpX/QMKS0MB0GA1UdDgQWBBQ64QmG1M8ZwpZ2dEl23OA1
        xmNjmjAOBgNVHQ8BAf8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zARBgNVHSAECjAI
        MAYGBFUdIAAwQwYDVR0fBDwwOjA4oDagNIYyaHR0cDovL2NybC5jb21vZG9jYS5j
        b20vQUFBQ2VydGlmaWNhdGVTZXJ2aWNlcy5jcmwwNAYIKwYBBQUHAQEEKDAmMCQG
        CCsGAQUFBzABhhhodHRwOi8vb2NzcC5jb21vZG9jYS5jb20wDQYJKoZIhvcNAQEM
        BQADggEBABns652JLCALBIAdGN5CmXKZFjK9Dpx1WywV4ilAbe7/ctvbq5AfjJXy
        ij0IckKJUAfiORVsAYfZFhr1wHUrxeZWEQff2Ji8fJ8ZOd+LygBkc7xGEJuTI42+
        FsMuCIKchjN0djsoTI0DQoWz4rIjQtUfenVqGtF8qmchxDM6OW1TyaLtYiKou+JV
        bJlsQ2uRl9EMC5MCHdK8aXdJ5htN978UeAOwproLtOGFfy/cQjutdAFI3tZs4RmY
        CV4Ks2dH/hzg1cEo70qLRDEmBDeNiXQ2Lu+lIg+DdEmSx/cQwgwp+7e9un/jX9Wf
        8qn0dNW44bOwgeThpWOjzOoEeJBuv/c=
        -----END CERTIFICATE-----


    otaConfiguration:
      type: object
      properties:
        url:
          type: string
          format: url
          description: URL for the firmware update server
          example: https://www.somewhere.com/firmware.json
        certificate:
          type: string
          description: Path where the certificate can be found that should be used when https is specified
          example: "/certs/mycert.pem"
      required:
        - url


  examples:
    emptyArray:
      value: []

    eventLog:
      value:
        - time: 1709398094
          level: info
          text: Event log started
        - time: 1709398150
          level: notify
          text: MQTT connected
        - time: 1709398228
          level: error
          text: MQTT disconnected

    errorLog:
      value:
        - text: MQTT disconnected
        - text: Ethernet disconnected